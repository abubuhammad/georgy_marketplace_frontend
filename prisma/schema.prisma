// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id            String   @id @default(cuid())
  email         String   @unique
  password      String
  firstName     String
  lastName      String
  role          UserRole @default(CUSTOMER)
  avatar        String?
  isVerified    Boolean  @default(false)
  emailVerified Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  passwordResets PasswordReset[]
  sessions       Session[]
  sellerProfile  SellerProfile?
  customerProfile CustomerProfile?
  adminProfile    AdminProfile?
  artisanProfile  ArtisanProfile?

  @@map("users")
}

// User roles enum
enum UserRole {
  CUSTOMER
  SELLER
  ADMIN
  ARTISAN
  REALTOR
  HOUSE_AGENT
  HOUSE_OWNER
  EMPLOYER
  JOB_SEEKER
  DELIVERY
}

// Password reset tokens
model PasswordReset {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}

// User sessions for token management
model Session {
  id           String   @id @default(cuid())
  userId       String
  token        String   @unique
  refreshToken String?  @unique
  expiresAt    DateTime
  isActive     Boolean  @default(true)
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Seller profile for marketplace sellers
model SellerProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  businessName      String
  businessDescription String? @db.Text
  businessType      String
  businessAddress   Json?
  contactInfo       Json?
  bankDetails       Json?
  taxInfo           Json?
  socialMedia       Json?
  branding          Json?
  verification      Json?
  settings          Json?
  statistics        Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("seller_profiles")
}

// Customer profile
model CustomerProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  personalInfo    Json?
  shippingAddress Json?
  billingAddress  Json?
  preferences     Json?
  loyaltyProgram  Json?
  paymentMethods  Json?
  orderHistory    Json?
  wishlist        Json?
  reviews         Json?
  statistics      Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("customer_profiles")
}

// Admin profile
model AdminProfile {
  id             String   @id @default(cuid())
  userId         String   @unique
  personalInfo   Json?
  permissions    Json?
  systemSettings Json?
  statistics     Json?
  activityLog    Json?
  preferences    Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admin_profiles")
}

// Artisan profile
model ArtisanProfile {
  id             String   @id @default(cuid())
  userId         String   @unique
  businessInfo   Json?
  contactInfo    Json?
  businessAddress Json?
  services       Json?
  portfolio      Json?
  bookings       Json?
  availability   Json?
  verification   Json?
  ratings        Json?
  statistics     Json?
  bankDetails    Json?
  settings       Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("artisan_profiles")
}